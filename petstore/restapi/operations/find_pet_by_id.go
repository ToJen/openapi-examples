// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// FindPetByIDHandlerFunc turns a function with the right signature into a find pet by id handler
type FindPetByIDHandlerFunc func(FindPetByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FindPetByIDHandlerFunc) Handle(params FindPetByIDParams) middleware.Responder {
	return fn(params)
}

// FindPetByIDHandler interface for that can handle valid find pet by id params
type FindPetByIDHandler interface {
	Handle(FindPetByIDParams) middleware.Responder
}

// NewFindPetByID creates a new http.Handler for the find pet by id operation
func NewFindPetByID(ctx *middleware.Context, handler FindPetByIDHandler) *FindPetByID {
	return &FindPetByID{Context: ctx, Handler: handler}
}

/*FindPetByID swagger:route GET /pets/{id} findPetById

Returns a user based on a single ID, if the user does not have access to the pet

*/
type FindPetByID struct {
	Context *middleware.Context
	Handler FindPetByIDHandler
}

func (o *FindPetByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFindPetByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
